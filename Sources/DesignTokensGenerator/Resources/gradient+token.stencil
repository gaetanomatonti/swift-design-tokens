{% import "common.stencil" %}
{% set tokenType %}GradientToken{% endset %}
{% macro tokensBlock tokens %}
  {% for token in tokens %}
  {% if token.description %}
  /// {{ token.description }}
  {% endif %}
  {% set tokenName %}{{ token.path|join:", "|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords }}{% endset %}
  public static let {{ tokenName }} = {%+  call gradientToken token.gradient +%}
  {% endfor %}
{% endmacro %}
// Generated with swift-design-tokens â€“ https://github.com/gaetanomatonti/swift-design-tokens

public struct GradientToken {
  public struct Stop {
    let color: ColorToken
    let position: NumberToken
  }
  
  let stops: [Stop]
}

extension {{tokenType}} {
{% if tokens.count > 0 %}

  // MARK: - Tokens

{% call tokensBlock tokens %}
{% endif %}
{% if aliases.count > 0 %}

  // MARK: - Aliases

{% call aliasesBlock aliases tokenType %}
{% endif %}
}

#if canImport(SwiftUI)
import SwiftUI

public extension Gradient {
  init(token: GradientToken) {
    self.init(stops: token.stops.map { Gradient.Stop(token: $0) })
  }
  
  static func token(_ token: GradientToken) -> Gradient {
    Gradient(token: token)
  }
}

public extension Gradient.Stop {
  init(token: GradientToken.Stop) {
    self.init(color: .token(token.color), location: .number(token.position))
  }
}
#endif
